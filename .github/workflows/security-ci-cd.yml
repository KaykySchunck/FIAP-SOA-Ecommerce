name: Security CI/CD (SAST + SCA + DAST)

on:
  pull_request:
  push:
    branches: [ "main", "master" ]
  schedule:
    - cron: "0 3 * * 1"     # semanal (segunda 03:00 UTC)
  workflow_dispatch:

jobs:
  # ----------------------
  # 1) SAST - Semgrep
  # ----------------------
  sast:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Semgrep scan -> SARIF
        uses: returntocorp/semgrep-action@v1
        with:
          entryPoint: semgrep
          args: >-
            scan
            --config p/owasp-top-ten
            --config p/secrets
            --config p/java
            --config p/kotlin
            --config p/spring
            --sarif
            --output semgrep.sarif
            --metrics=off

      - name: Upload SARIF (SAST)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # Gate: falha se houver n√≠vel "error" no SARIF (High/Critical nas rules p√∫blicas)
      - name: Gate SAST (ERROR)
        run: |
          if [ ! -f semgrep.sarif ]; then
            echo "semgrep.sarif n√£o encontrado"; exit 1
          fi
          ERRORS=$(jq '[.runs[].results[] | select(.level=="error")] | length' semgrep.sarif)
          echo "SAST ERROR findings: $ERRORS"
          test "$ERRORS" -gt 0 && exit 1 || exit 0

  # ----------------------
  # 2) SCA - OWASP Dependency-Check
  # ----------------------
  sca:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache DC DB
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check
          key: depcheck-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            depcheck-db-${{ runner.os }}-

      - name: Run Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        with:
          project: "${{ github.repository }}"
          path: "."
          format: "HTML,JSON,SARIF"
          out: "reports"
          fail_on_cvss: "7.0"   # gate autom√°tico: CVSS >= 7 falha o job

      - name: Upload HTML/JSON (SCA)
        uses: actions/upload-artifact@v4
        with:
          name: depcheck-reports
          path: reports

      - name: Upload SARIF (SCA)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif

  # ----------------------
  # 3) Build da aplica√ß√£o (placeholder)
  #    Use seu build real. Ex.: Gradle (Kotlin/Spring).
  # ----------------------
  build:
    runs-on: ubuntu-latest
    needs: [sast, sca]          # s√≥ builda se SAST e SCA passarem
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Build (Gradle)
        run: |
          ./gradlew --version || ./gradlew wrapper
          ./gradlew build -x test

  # ----------------------
  # 4) Deploy para STAGING (placeholder)
  # ----------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    environment: staging
    steps:
      - name: Deploy to staging (exemplo)
        run: |
          echo "Fa√ßa o deploy real aqui (k8s, fly, render, heroku, etc)."
          echo "Se necess√°rio, exporte a URL para o secret ZAP_TARGET_URL."

  # ----------------------
  # 5) DAST - OWASP ZAP Baseline (contra STAGING)
  # ----------------------
  dast:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    permissions:
      contents: read
      security-events: write
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ secrets.ZAP_TARGET_URL }}
          cmd_options: >-
            -a
            -t 60
            -m 5
            -r zap-report.html
            -w zap-warnings.md

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-report.html
            zap-warnings.md

      # Gate: falha se houver "High" no sum√°rio do ZAP
      - name: Gate DAST (High)
        run: |
          if grep -qi "High" zap-warnings.md; then
            echo "ZAP encontrou HIGH"; exit 1
          else
            echo "Sem HIGH no ZAP"; exit 0
          fi

  # ----------------------
  # 6) Deploy para PRODU√á√ÉO (bloqueado por todos os gates)
  # ----------------------
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    if: ${{ success() }}          # s√≥ se tudo acima passou
    environment: production
    steps:
      - name: Deploy to production (exemplo)
        run: echo "Seu passo real de deploy em produ√ß√£o aqui."

  # ----------------------
  # 7) Notifica√ß√£o (Slack) se qualquer coisa falhar
  # ----------------------
  notify-failure:
    runs-on: ubuntu-latest
    needs: [sast, sca, build, deploy-staging, dast, deploy-prod]
    if: failure()
    steps:
      - name: Notify Slack (falha)
        run: |
          payload=$(jq -n --arg w "${{ github.workflow }}" \
                         --arg r "${{ github.repository }}" \
                         --arg n "${{ github.run_number }}" \
                         --arg u "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                         '{text: ("üö® Seguran√ßa falhou em \($w) #\($n) ‚Äî \($r)\n" +
                                  "SAST: " + "${{ needs.sast.result }}" + " | " +
                                  "SCA: "  + "${{ needs.sca.result }}"  + " | " +
                                  "DAST: " + "${{ needs.dast.result }}" + "\n" +
                                  "Run: "  + $u ) }')
          curl -X POST -H 'Content-type: application/json' \
               --data "$payload" \
               ${{ secrets.SLACK_WEBHOOK_URL }}
