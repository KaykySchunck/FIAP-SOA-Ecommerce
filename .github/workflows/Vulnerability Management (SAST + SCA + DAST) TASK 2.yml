name: Vulnerability Management (SAST + SCA + DAST)

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  schedule:
    - cron: "0 3 * * 4"   # semanal (qui 03:00 UTC)
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: vuln-mgmt-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: "21"

jobs:
  sast_semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Semgrep
        run: pipx install semgrep
      - name: Run Semgrep (OWASP + Java/Kotlin/Spring) — gate
        run: |
          CONFIGS="--config p/owasp-top-ten --config p/java --config p/kotlin"
          test -f .semgrep.yml && CONFIGS="$CONFIGS --config .semgrep.yml" || true
          semgrep $CONFIGS --severity=ERROR --error \
            --sarif --output semgrep.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  sca_odc:
    name: SCA (OWASP Dependency-Check) — gate CVSS>=7.0
    runs-on: ubuntu-latest
    env:
      DC_FAIL_ON_CVSS: "7.0"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ./.odc-data
          key: odc-data-v11-${{ runner.os }}-${{ hashFiles('**/build.gradle*','**/gradle.lockfile','**/pom.xml') }}
          restore-keys: |
            odc-data-v11-${{ runner.os }}-
      - run: mkdir -p .odc-data odc-reports
      - name: Dependency-Check (Docker)
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          docker pull owasp/dependency-check:latest
          SUPP=""
          [ -f security/dependency-check-suppression.xml ] && SUPP="--suppression /src/security/dependency-check-suppression.xml"
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -e NVD_API_KEY="$NVD_API_KEY" \
            -v "$PWD":/src \
            -v "$PWD/.odc-data":/usr/share/dependency-check/data \
            -v "$PWD/odc-reports":/report \
            owasp/dependency-check:latest \
              --scan /src \
              --project "${{ github.repository }}@${{ github.sha }}" \
              --out /report \
              --format HTML --format JSON --format SARIF \
              --failOnCVSS "${DC_FAIL_ON_CVSS}"
      - name: Upload SARIF
        if: hashFiles('odc-reports/dependency-check-report.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: odc-reports/dependency-check-report.sarif
          category: owasp-dependency-check
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: odc-reports
          path: odc-reports/*

  dast_zap:
    name: DAST (OWASP ZAP) — gate High/Critical
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Build bootJar
        run: |
          chmod +x gradlew || true
          ./gradlew bootJar -x test
      - run: docker network create zapnet || true
      - name: Start Postgres
        run: |
          docker run -d --name db --network zapnet \
            -e POSTGRES_DB=ecomm -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 postgres:16-alpine
          for i in {1..30}; do docker exec db pg_isready -U postgres -d ecomm -h 127.0.0.1 -p 5432 && break; sleep 2; done
      - name: Start app
        run: |
          JAR=$(ls build/libs/*.jar | grep -v 'plain\.jar' | head -n1)
          docker run -d --name app --network zapnet -p 8080:8080 \
            -v "$PWD":/work -w /work openjdk:21-jdk \
            sh -lc 'java -Dspring.config.name=ignoreme -jar "'"$JAR"'" \
              --server.port=8080 --server.address=0.0.0.0 \
              --spring.datasource.url=jdbc:postgresql://db:5432/ecomm \
              --spring.datasource.username=postgres --spring.datasource.password=postgres \
              --spring.jpa.hibernate.ddl-auto=update'
      - name: Wait for health
        run: |
          for i in {1..60}; do docker run --rm --network zapnet curlimages/curl:8.9.1 -sSf http://app:8080/v1/products >/dev/null && exit 0; echo "waiting..."; sleep 3; done
          echo "app not ready"; docker logs app || true; exit 1
      - run: mkdir -p zap-out && chmod 777 zap-out
      - name: ZAP Full Scan
        run: |
          docker run --rm --network zapnet -v "$PWD/zap-out":/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://app:8080/v1/products \
              -r /zap/wrk/zap-full.html -w /zap/wrk/zap-full.md -J /zap/wrk/zap-full.json -x /zap/wrk/zap-full.xml \
              -a -m 5 || true
          sudo apt-get update && sudo apt-get install -y jq
          HIGHS=$(jq '[.site[]?.alerts[]? | select(.risk=="High" or .risk=="Critical" or (.riskdesc|test("^(High|Critical)")))] | length' zap-out/zap-full.json)
          echo "High/Critical findings: $HIGHS"; test "$HIGHS" -eq 0
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-full-reports
          path: zap-out/*
      - name: Cleanup
        if: always()
        run: |
          docker logs app --since 20m || true
          docker rm -f app db || true
          docker network rm zapnet || true

  notify_failure:
    needs: [sast_semgrep, sca_odc, dast_zap]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Slack (failure)
        #if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: '#D2222D'
          SLACK_TITLE: "❌ Vulnerability Management falhou"
          SLACK_MESSAGE: |
            Repo: ${{ github.repository }}
            Run:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
