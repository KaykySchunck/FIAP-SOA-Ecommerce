name: Security CI (SAST + SCA + DAST)

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write   # necessário para subir SARIF

concurrency:
  group: security-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 0) Build da app (gera JAR e publica como artifact)
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Preparar gradlew
        run: |
          test -f gradlew && chmod +x gradlew || true
          sed -i 's/\r$//' gradlew || true

      - name: Build (Gradle)
        run: ./gradlew bootJar -x test

      - name: Publicar JAR (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  # 1) SAST - Semgrep (gera SARIF)
  sast_semgrep:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Semgrep scan
        id: semgrep
        uses: returntocorp/semgrep-action@fcd5ab7459e8d91cb1777481980d1b18b4fc6735
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          generateSarif: "1"

      - name: Upload SARIF (Semgrep)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # 2) SCA - OWASP Dependency-Check (Docker) -> HTML/JSON/SARIF
  sca_odc:
    needs: build
    runs-on: ubuntu-latest
    env:
      DC_FAIL_ON_CVSS: "7.0"   # gate High/Critical
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore ODC data cache
        uses: actions/cache@v4
        with:
          path: ./.odc-data
          key: odc-data-v11-${{ runner.os }}-${{ hashFiles('**/build.gradle*','**/pom.xml','**/package-lock.json','**/gradle.lockfile','**/gradle/**') }}
          restore-keys: |
            odc-data-v11-${{ runner.os }}-

      - name: Preparar diretórios
        run: mkdir -p .odc-data odc-reports

      - name: Dependency-Check (Docker)
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          docker pull owasp/dependency-check:latest
          SUPP=""
          if [ -f security/dependency-check-suppression.xml ]; then
            SUPP="--suppression /src/security/dependency-check-suppression.xml"
          fi
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -e NVD_API_KEY="$NVD_API_KEY" \
            -v "$PWD":/src \
            -v "$PWD/.odc-data":/usr/share/dependency-check/data \
            -v "$PWD/odc-reports":/report \
            owasp/dependency-check:latest \
              --scan /src \
              --project "${{ github.repository }}@${{ github.sha }}" \
              --out /report \
              --format HTML --format JSON --format SARIF \
              --failOnCVSS "${DC_FAIL_ON_CVSS}" $SUPP || true
          ls -lah odc-reports || true

      - name: Upload SARIF (ODC)
        if: always() && hashFiles('odc-reports/dependency-check-report.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: odc-reports/dependency-check-report.sarif
          category: owasp-dependency-check

      - name: Upload artifacts (ODC)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: odc-reports
          path: |
            odc-reports/dependency-check-report.html
            odc-reports/dependency-check-report.json
            odc-reports/dependency-check-report.sarif
          if-no-files-found: warn

  # 3) DAST - ZAP Full (rede docker compartilhada)
  dast_zap:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Criar rede Docker
        run: docker network create zapnet || true

      - name: Start Postgres (zapnet)
        run: |
          docker run -d --name db --network zapnet \
            -e POSTGRES_DB=ecomm \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 postgres:16-alpine
          for i in {1..30}; do
            docker exec db pg_isready -U postgres -d ecomm -h 127.0.0.1 -p 5432 && break
            sleep 2
          done

      - name: Download app JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: appjar

      - name: "Start app (container name: app)"
        run: |
          JAR="$(ls appjar/*.jar | head -n1)"
          docker run -d --name app --network zapnet -p 8080:8080 \
            -v "$PWD/appjar":/work -w /work \
            openjdk:21-jdk \
            java -jar "$(basename "$JAR")" \
              --server.port=8080 \
              --server.address=0.0.0.0 \
              --spring.datasource.url=jdbc:postgresql://db:5432/ecomm \
              --spring.datasource.username=postgres \
              --spring.datasource.password=postgres \
              --spring.jpa.hibernate.ddl-auto=update

      - name: "Wait for health (http://app:8080/v1/products)"
        run: |
          for i in {1..60}; do
            docker run --rm --network zapnet curlimages/curl:8.9.1 -sSf http://app:8080/v1/products >/dev/null && { echo "App OK"; exit 0; }
            sleep 3
          done
          echo "App não respondeu em /v1/products"
          docker logs app || true
          exit 1

      - name: Preparar pasta de saída
        run: |
          mkdir -p zap-out
          chmod 777 zap-out

      - name: ZAP Full Scan
        run: |
          docker run --rm --network zapnet \
            -v "$PWD/zap-out":/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
              -t http://app:8080/v1/products \
              -r /zap/wrk/zap-full.html \
              -w /zap/wrk/zap-full.md \
              -J /zap/wrk/zap-full.json \
              -a -m 5 || true

      - name: Ensure jq
        run: |
          command -v jq >/dev/null || { sudo apt-get update && sudo apt-get install -y jq; }

      - name: Gate DAST (High)
        run: |
          test -f zap-out/zap-full.json || { echo "zap-out/zap-full.json não encontrado"; exit 1; }
          HIGHS=$(jq '[.site[].alerts[] | select(.riskdesc|test("^High"))] | length' zap-out/zap-full.json)
          echo "ZAP High findings: $HIGHS"
          test "$HIGHS" -eq 0

      - name: Upload reports (ZAP)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-full-reports
          path: zap-out/*

      - name: Cleanup (containers/network)
        if: always()
        run: |
          docker logs app --since 30m || true
          docker rm -f app db || true
          docker network rm zapnet || true

  # 4) Gate final de deploy (só roda se tudo passou)
  ready_to_deploy:
    needs: [sast_semgrep, sca_odc, dast_zap]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "✅ Todos os gates passaram. Pronto para deploy."

  # 5) Notificação no Slack quando falhar
  notify_failure:
    needs: [sast_semgrep, sca_odc, dast_zap]
    if: ${{ failure() }}          # só dispara quando o workflow falha
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}   # <- mapeia secret para env do job
    steps:
      - name: Slack (failure)
        if: ${{ env.SLACK_WEBHOOK != '' }}              # <- usa env no if (permitido)
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
          SLACK_COLOR: '#D2222D'
          SLACK_TITLE: "❌ Security CI falhou"
          SLACK_MESSAGE: |
            Repo: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.run_number }}
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}



