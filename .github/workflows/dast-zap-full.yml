name: DAST - ZAP Full (same docker network)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  dast_zap:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Make gradlew executable (and fix CRLF if any)
        run: |
          test -f gradlew || { echo "gradlew n達o encontrado"; exit 1; }
          chmod +x ./gradlew
          sed -i 's/\r$//' ./gradlew

      - name: Build (Gradle)
        run: ./gradlew bootJar -x test

      - name: Create Docker network
        run: docker network create zapnet || true

      - name: Start Postgres (zapnet)
        run: |
          docker run -d --name db --network zapnet \
            -e POSTGRES_DB=ecomm \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 \
            postgres:16-alpine
          # Espera DB ficar pronto
          for i in {1..30}; do
            docker exec db pg_isready -U postgres -d ecomm -h 127.0.0.1 -p 5432 && break
            sleep 2
          done

      - name: "Start app (container name: app)"
        run: |
          JAR="$(ls build/libs/*.jar | head -n1)"
          echo "Usando JAR: $JAR"
          docker run -d --name app --network zapnet -p 8080:8080 \
            -v "$PWD":/work -w /work \
            openjdk:21-jdk \
            java -jar "$JAR" \
              --server.port=8080 \
              --server.address=0.0.0.0 \
              --spring.datasource.url=jdbc:postgresql://db:5432/ecomm \
              --spring.datasource.username=postgres \
              --spring.datasource.password=postgres \
              --spring.jpa.hibernate.ddl-auto=update

      - name: Wait for health (http://app:8080/v1/products)
        run: |
          for i in {1..60}; do
            docker run --rm --network zapnet curlimages/curl:8.9.1 -sSf http://localhost:8080/v1/products >/dev/null && { echo "App OK"; exit 0; }
            sleep 3
          done
          echo "App n達o respondeu em /v1/products"
          docker logs app || true
          exit 1

      - name: Prep output dir (writeable)
        run: |
          mkdir -p zap-out
          chmod 777 zap-out

      - name: Run ZAP Full Scan (same docker network)
        run: |
          # N達o falhe aqui; deixe o gate decidir
          docker run --rm --network zapnet \
            -v "$PWD/zap-out":/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
              -t http://app:8080/v1/products \
              -r /zap/wrk/zap-full.html \
              -w /zap/wrk/zap-full.md \
              -J /zap/wrk/zap-full.json \
              -a -m 5 || true

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Gate por severidade (High)
        run: |
          test -f zap-out/zap-full.json || { echo "zap-out/zap-full.json n達o encontrado"; exit 1; }
          HIGHS=$(jq '[.site[].alerts[] | select(.riskdesc|test("^High"))] | length' zap-out/zap-full.json)
          echo "High findings: $HIGHS"
          if [ "$HIGHS" -gt 0 ]; then
            echo "Falhando pipeline por findings High."
            exit 1
          fi

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-full-reports
          path: |
            zap-out/zap-full.html
            zap-out/zap-full.md
            zap-out/zap-full.json

      - name: Cleanup
        if: always()
        run: |
          docker logs app --since 30m || true
          docker rm -f app db || true
          docker network rm zapnet || true

