name: DAST - ZAP Full (docker-net)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  zap_full:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v3

      - name: Ensure Gradle wrapper + chmod
        run: |
          [ -f ./gradlew ] || gradle wrapper
          sed -i 's/\r$//' ./gradlew || true
          chmod +x ./gradlew
          ./gradlew --version

      - name: Build JAR
        run: ./gradlew bootJar -x test

      - name: Create docker network
        run: docker network create zapnet || true

      - name: Start Postgres (zapnet)
        run: |
          docker run -d --name ecommerce_db --network zapnet \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=ecommerce \
            postgres:16
          # Aguarda DB
          for i in {1..30}; do
            docker run --rm --network zapnet postgres:16 \
              pg_isready -h ecommerce_db -U postgres -d ecommerce && break || sleep 2
          done

      - name: Start app container (zapnet)
        run: |
          JAR=$(ls build/libs/*.jar | head -n1)
          docker run -d --name app --network zapnet \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://ecommerce_db:5432/ecommerce \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=postgres \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
            -v "$PWD/build/libs":/app:ro \
            eclipse-temurin:21-jre \
            java -jar /app/$(basename "$JAR") \
              --server.port=8080 --server.address=0.0.0.0
          # Aguarda API
          for i in {1..60}; do
            CODE=$(docker run --rm --network zapnet curlimages/curl:8.9.1 -s -o /dev/null -w "%{http_code}" http://app:8080/v1/products || echo 000)
            [ "$CODE" != "000" ] && echo "App up (HTTP $CODE)" && break || sleep 2
          done

      # >>> FIX DE PERMISSÃO <<<
      - name: Prepare writable folder for ZAP outputs
        run: |
          mkdir -p zap-out
          chmod 777 zap-out

      - name: Run ZAP Full Scan (same docker network)
        run: |
          docker run --rm --network zapnet \
            -v "$PWD/zap-out":/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
              -t http://app:8080/v1/products \
              -r /zap/wrk/zap-full.html \
              -w /zap/wrk/zap-full.md \
              -J /zap/wrk/zap-full.json \
              -a -m 5

      - name: Gate por severidade (High)
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          test -f zap-out/zap-full.json || { echo "zap-out/zap-full.json não encontrado"; exit 1; }
          HIGHS=$(jq '[.site[].alerts[] | select(.riskdesc|test("^High"))] | length' zap-out/zap-full.json)
          echo "High findings: $HIGHS"
          if [ "$HIGHS" -gt 0 ]; then exit 1; fi

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-full-reports
          path: |
            zap-out/zap-full.html
            zap-out/zap-full.md
            zap-out/zap-full.json

      - name: Cleanup
        if: always()
        run: |
          echo "---- app logs (últimas 200 linhas) ----" || true
          docker logs app --tail 200 || true
          docker rm -f app ecommerce_db || true
          docker network rm zapnet || true


