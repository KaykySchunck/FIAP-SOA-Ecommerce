name: DAST - ZAP Full (same docker network)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  dast_zap:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 21 (build)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Make gradlew executable (fix CRLF)
        shell: bash
        run: |
          test -f gradlew || { echo "gradlew não encontrado"; exit 1; }
          chmod +x ./gradlew
          sed -i 's/\r$//' ./gradlew

      - name: Build bootJar (no tests)
        shell: bash
        run: ./gradlew bootJar -x test

      - name: Create Docker network
        shell: bash
        run: docker network create zapnet || true

      - name: Start Postgres (zapnet, DB=ecommerce)
        shell: bash
        run: |
          docker run -d --name db --network zapnet \
            -e POSTGRES_DB=ecommerce \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 postgres:16-alpine
          for i in {1..60}; do
            docker exec db pg_isready -U postgres -d ecommerce -h 127.0.0.1 -p 5432 && { echo "DB OK"; exit 0; }
            echo "aguardando DB... ($i)"; sleep 2
          done
          echo "DB não respondeu"; exit 1

      - name: Start app (container:app)
        shell: bash
        run: |
          echo "JARs em build/libs:"; ls -lah build/libs || true
          # pega o boot jar (ignora -plain.jar)
          JAR="$(ls build/libs/*.jar 2>/dev/null | grep -v 'plain\.jar' | head -n1)"
          if [ -z "$JAR" ]; then
            echo "Boot JAR não encontrado em build/libs"; exit 1
          fi
          echo "Usando JAR: $JAR"

          docker run -d --name app --network zapnet -p 8080:8080 \
            -e SERVER_PORT=8080 \
            -e SERVER_ADDRESS=0.0.0.0 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecommerce \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=postgres \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
            -v "$PWD":/work -w /work openjdk:21-jdk \
            sh -lc 'java $JAVA_OPTS -jar "'"$JAR"'"'

      - name: Verify app container is up (fail fast)
        shell: bash
        run: |
          echo "---- docker ps -a ----"
          docker ps -a
          if [ "$(docker inspect -f '{{.State.Running}}' app 2>/dev/null)" != "true" ]; then
            echo "❌ app container NÃO está rodando. Logs:"
            docker logs app || true
            exit 1
          fi

      - name: Wait for readiness (Tomcat log or /vuln/echo)
        shell: bash
        run: |
          # tenta detectar o log do Tomcat "started on port"
          for i in {1..90}; do
            if docker logs app 2>&1 | grep -qE "Tomcat.*started on port 8080"; then
              echo "✅ Tomcat started"; READY=1; break; fi
            echo "aguardando Tomcat... ($i)"; sleep 2
          done
          # se não viu o log, faz health via IP
          if [ -z "$READY" ]; then
            APP_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' app)
            echo "APP_IP=$APP_IP"
            [ -n "$APP_IP" ] || { echo "❌ app sem IP"; docker logs app || true; exit 1; }
            for i in {1..60}; do
              docker run --rm --network zapnet curlimages/curl:8.9.1 -sSf \
                "http://$APP_IP:8080/vuln/echo?q=ping" >/dev/null && { echo "✅ App OK por health"; break; }
              echo "aguardando health... ($i)"; sleep 3
            done
          fi
          # verificação final
          docker run --rm --network zapnet curlimages/curl:8.9.1 -sSf \
            "http://app:8080/vuln/echo?q=ready" >/dev/null \
            || { echo "❌ App não respondeu ao health"; docker logs app || true; exit 1; }

      - name: Prep output dir
        shell: bash
        run: |
          mkdir -p zap-out
          chmod 777 zap-out

      - name: Run ZAP Full Scan (target=/vuln/echo)
        shell: bash
        run: |
          docker run --rm --network zapnet \
            -v "$PWD/zap-out":/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
              -t "http://app:8080/vuln/echo?q=test" \
              -r /zap/wrk/zap-full.html \
              -w /zap/wrk/zap-full.md \
              -J /zap/wrk/zap-full.json \
              -x /zap/wrk/zap-full.xml \
              -a -m 5 \
              -z "-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true" || true

      - name: Ensure jq
        shell: bash
        run: |
          command -v jq >/dev/null || { sudo apt-get update && sudo apt-get install -y jq; }

      - name: Gate por severidade (High/Critical)
        shell: bash
        run: |
          test -f zap-out/zap-full.json || { echo "zap-out/zap-full.json não encontrado"; exit 1; }
          HIGHS=$(jq '[.site[]?.alerts[]? | select(.risk=="High" or .risk=="Critical" or (.riskdesc|test("^(High|Critical)")))] | length' zap-out/zap-full.json)
          echo "High/Critical findings: $HIGHS"
          if [ "$HIGHS" -gt 0 ]; then
            echo "❌ Falhando pipeline por findings High/Critical."
            exit 1
          fi
          echo "✅ Sem High/Critical."

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-full-reports
          path: |
            zap-out/zap-full.html
            zap-out/zap-full.md
            zap-out/zap-full.json
            zap-out/zap-full.xml

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          docker logs app --since 20m || true
          docker rm -f app db || true
          docker network rm zapnet || true
